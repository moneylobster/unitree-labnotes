#+TITLE: Unitree Robot Notes
#+STARTUP: overview

* Quick Links
** [[https://botland.store/img/art/inne/Go1_User_Manual_V1.4_202112.pdf][Manual]]
** [[https://github.com/unitreerobotics/unitree_legged_sdk][unitree legged sdk]]
** [[https://github.com/unitreerobotics/unitree_ros2_to_real][unitree ros2 package]]
** [[https://github.com/Bin4ry/free-dog-sdk][opensource sdk]]
** [[https://github.com/MAVProxyUser/YushuTechUnitreeGo1][Nice summarizing doc (Hostile)]]
** [[https://github.com/maggusscheppi/Go1][Another one (Magguss)]]
** [[https://www.yuque.com/ironfatty/nly1un][Chinese doc]]
** [[https://www.generationrobots.com/media/unitree/Go1%20Datasheet_EN%20v3.0.pdf][Datasheet]]
** [[https://www.youtube.com/watch?v=YSedTUxI0wc][ROS2 video]]
** [[https://katie-hughes.github.io/unitree/][someone implementing low-level walking]]
*** [[https://github.com/katie-hughes/unitree_ros2][their ros2 setup]]
*** [[https://ngmor.github.io/projects/legged-autonomous-inspection/][inspection application from nw uni]]
*** [[https://marnonel6.github.io/projects/1-guidedog-unitreego1][guide dog application from nw uni]]
*** [[https://avazahedi.github.io/projects/02-hgr-go1][gesture based ctrl from nw uni]]
** [[https://docs.trossenrobotics.com/unitree_go1_docs/getting_started.html][Trossen Docs]]
** [[https://github.com/aatb-ch/go1_republisher][Dog Odometry as ROS]]
** [[https://github.com/SailorTheMan/unitree_slam][slam - ros1]]
realsense & lidar it seems
** [[https://github.com/ShuoYangRobotics/A1-QP-MPC-Controller][MPC controller, but for A1]]
** [[https://github.com/antonilo/vision_locomotion][ML controller, but for A1]]
** [[https://github.com/zerenluo123/Go1-RL-Controller][RL controller, only sim as of now]]
* Internals
[[./1. imgs/NetworkLayout.png][Network Layout]]

Go1 EDU: 5 SSS (cams), 3 sets of Sonar, 3 Nanos, 2D Lidar (where?), 4G modem, foot force sensor
* Programming
** UDP
*** Examples in the unitree_legged_sdk repo communicate with the robot over UDP.
**** Alternate sdk, wip: [[https://github.com/Bin4ry/free-dog-sdk]]
*** The robot has its own WiFi network that we connect to to send commands
** MQTT
[[https://github.com/MAVProxyUser/YushuTechUnitreeGo1#sending-mqtt-commands-to-the-dog]]
** two security vulnerabilities that allow arbitrary code execution on the dog
[[https://github.com/MAVProxyUser/YushuTechUnitreeGo1#programming-interface]]
[[https://github.com/MAVProxyUser/YushuTechUnitreeGo1#update-interface]]
** SDK can be used with non-EDU models
diffs here:
[[https://github.com/MAVProxyUser/YushuTechUnitreeGo1#sdk-usage-on-non-edu-models]]
** The MIT Cheetah code can be called to make it do a backflip
* Mounting stuff on the robot
** Examples
*** [[file:1. imgs/ses-go1-lidar.png][Lidar Mount]]
*** [[https://www.printables.com/model/234576-unitree-go-1s-bar-and-cup-holder][Printable cupholder]]
** DONE Figure out how mounting is done.
* Logs
** [2023-05-18 Thu]
*** Tried sending commands via MQTT.
[[../2. software/1. mqtt/mqtt_test.py]]

The controller/action stuff works well without any further setup but I couldn't get the controller/stick messages do do anything. Occasionally the robot would trot in place but it wasn't super repeatable.

[[../2. software/1. mqtt/mqtt_stickread.py]]

This was supposed to read the stick commands coming in from the remote but it didn't seem to work. It did pick up a bunch of other messages though, seemingly status updates from the robot (encrypted?)

[[../2. software/1. mqtt/mqtt_remote.py]]

Turns out controller/stick works. It didn't work before because 1 was too high a number. However, it only seems to go forward. I couldn't get the robot to move differently by changing parameters.

**** TODO Try listening for controller/action messages and see if those show up.
*** Tried using the official SDK

There was a bunch of stuff to install, and I couldn't be bothered to install boost and all that.
I will try to set up the ROS thing on the laptop in Rolab according to [[https://gist.github.com/dbaldwin/feb0d279c67e0bcb191d2b366f867a84][this]] link.

*** Tried the opensource SDK
Example worked really well.
Seems like each high level command sent lasts for ~1 second.

**** DONE Does the robot always go for the most recent command? YES
If so, I can just keep on sending commands as fast as possible.

*** Installing official SDK on the lab laptop
Only did the first step so far.

** [2023-05-22 Mon]
*** Installed the ROS2 sdk on the laptop.
Followed [[https://gist.github.com/dbaldwin/feb0d279c67e0bcb191d2b366f867a84][this]].
The process itself was a bit cumbersome, had to do a lot of steps, including fixing typos and building over and over again.

This created a ROS2 container that I access via VNC.

I got the [[https://github.com/unitreerobotics/unitree_ros2_to_real/blob/main/src/ros2_walk_example.cpp][high-level walk example]] to work. None of the steps about configuring the IP address were done, it seems those aren't really necessary. Running the example requires (after a ~colcon build~:

#+begin_src bash
cd ros2_ws
source install/setup.bash
#+end_src

on two separate terminals, then running these different commands:

#+begin_src bash
ros2 run unitree_legged_real ros2_udp highlevel
ros2 run unitree_legged_real ros2_walk_example
#+end_src

**** TODO Create a Dockerfile that does all these steps
Consider using [[https://github.com/MAVProxyUser/unitree_ros2_ws][this fork]].
**** DONE Figure out how to ssh into this or something instead of vnc.
**** DONE Simple teleoperation example.
The pre-existing teleop node publishes Twist messages. There seems to be some [[https://github.com/unitreerobotics/unitree_ros_to_real/blob/master/unitree_legged_real/include/convert.h#L304][code]] that already interops with Twist messages in the ros_to_real package, but not in the ros2_to_real one. There is a [[https://github.com/unitreerobotics/unitree_ros2_to_real/pull/2/files][pull request]] that fixes this, and a [[https://github.com/MAVProxyUser/unitree_ros2_to_real][fork]] that has these implemented along with a keyboard teleop example.

I was trying to write [[../2. software/3. ros/planar_translate.py][a converter]] that turns Twist messages into supported high-level commands, but I think I will just use this fork instead.

Cloned the unitree_ros2_to_real and unitree_legged_sdk forks into the sdk directory, then moved the ros2_unitree_legged_msgs out from the ros2_to_real folder. It built with some warnings.

The fork did not build the ros2_control_via_keyboard example by default, so I added into the CMakeList

#+begin_src cmake
add_executable(ros2_control_via_keyboard src/ros2_control_via_keyboard.cpp)
target_link_libraries(ros2_twist_sub ${EXTRA_LIBS})
ament_target_dependencies(ros2_control_via_keyboard rclcpp geometry_msgs)
#+end_src

and added ~ros2_control_via_keyboard~ into the install targets.

To run it:
#+begin_src bash
ros2 run unitree_legged_real ros2_twist_sub highlevel
ros2 run unitree_legged_real ros2_control_via_keyboard
#+end_src

Even though the node seemed to be publishing messages, the robot didn't move. The logs show cmdVelCallback was running but highCmdCallback wasn't, so the commands are formatted but not sent for some reason.

walkexample works with twist_sub.

The twist messages (velCmdCallback) did not have code to send the messages via udp. I added them in. Now it works!

***** TODO Make your own fork of these libraries where the keyboard teleop works out of the box.
** [2023-05-29 Mon]
*** Can ssh into robot
Turns out you need to ssh into the pi first, then you can ssh into the nanos from there.
*** Backing up before doing any modifications
Following Hostile's doc.
Connected a usb to the rpi.
Backup took some time, much more than what I expected from the doc, around 20 minutes, then dd stopped since it hit the 4GB limit of my FAT32 drive.
Formatted drive to ext4, dd took a long time and became unresponsive. Shut down system. Seems to only have written ~60MB upon termination.
**** Backup [1/4]
***** DONE Raspberry pi (192.168.123.161)
Used space seems to be around 17GB.
Copied ~31,9GB. (into a 32GB drive somehow!)
Took 3336.87s
9.7MB/s
***** TODO Nano2 (192.168.123.14)
***** TODO Nano3 (Main nano) (192.168.123.15)
***** TODO Nano1 (Head nano) (192.168.123.13)
** [2023-06-05 Mon]
*** Simple square demo
**** Made a simple ros2 package that publishes forward and left commands on cmd_vel alternately
[[../2. software/3. ros/1. packages/square_demo/][package folder]] here
**** It works ok, but robot doesn't rotate exactly 90 deg for 1.57 rotation command so the path is not an exact square
*** Backup
The raspberry can't interface with exFAT, but can read NTFS drives. Backing up to an NTFS drive now.
Even though ~dd~ copied more than the 17GB ~df~ claims the used storage in the pi to be, ~dd~ hasn't stopped yet, and is at 22GB.
Turns out ~dd~ copies the entire partition, no matter if it's used or not.
For the future [[https://raspberrypi.stackexchange.com/questions/120124/how-to-copy-sd-card-whithout-copying-the-unallocated-space/120154#120154][image-backup]] can be considered instead.
Or gzipping the image at the very least.
**** DONE Copy disk image to a lab computer
maybe gzip it first?
** [2023-06-06 Tue]
*** New goal: a line following demo
Use front cam.
*** TODO Access front cam
*** TODO Access go1 odometry
Test it for drift and whatnot sometime.
** [2023-06-19 Mon]
*** Jetson backup
Backing up the head jetson.
~dd if=/dev/mmcblk0 bs=4096 status=progress | gzip -c | ssh pi@192.168.123.161 'cat > /media/pi/USBDRIVE/go1/nano2gb/mmcblk0.gz'~
Got stuck twice, once on 1.4GB, then on 1.8GB. Terminates cleanly, but to restart, the previous backup file needs to be deleted.
**** DONE Try with gzip -cv to see if there is a problem with gzip
Did not print anything out.
** [2023-06-20 Tue]
*** Jetson backup
Trying it again with 32M blocksize. This time it got stuck on 3.2GB.
Trying again with 1G blocksize. Seems stuck after first block, 1.1GB.
Trying again with 300M blocksize. Seems stuck at 1.3GB.
Could this be an issue with cooling the Jetson?
Retrying with 64M blocksize. Stuck at 1.6GB.

